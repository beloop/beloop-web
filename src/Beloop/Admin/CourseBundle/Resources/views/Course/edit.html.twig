{% extends 'AdminCommonBundle::base.html.twig' %}

{% block title %}Edit course {{ course.name }}{% endblock %}

{% form_theme form 'AdminCommonBundle::Forms/fields.html.twig' %}

{% block body %}
    {{ parent() }}

    <div class="page-head">
        <h2>Edit course <i>{{ course.name }}</i></h2>
        <ol class="breadcrumb">
            <li><a href="{{ url('admin_course_list') }}">Admin</a></li>
            <li><a href="{{ url('admin_course_list') }}">Courses</a></li>
            <li class="active">{{ course.name|default('admin.course.field.actions.new.title')|trans }}</li>
        </ol>
    </div>

    <div class="main-content">
        <div class="row">
            <div class="col-sm-12">
                {% include 'AdminCommonBundle:Common:flashMessages.html.twig' %}

                {% set formAction =
                    course.id
                    ? url('admin_course_update', { id: course.id })
                    : url('admin_course_save')
                %}
                <div class="tab-container">
                    <ul class="nav nav-tabs">
                        <li class="active"><a href="#course" data-toggle="tab" aria-expanded="true">Course</a></li>
                        {% if (course.id) %}
                        <li><a href="#lessons" data-toggle="tab" aria-expanded="true">Lessons & Modules</a></li>
                        <li><a href="#users" data-toggle="tab" aria-expanded="true">Users</a></li>
                        {% endif %}
                    </ul>
                    <div class="tab-content">
                        <div id="course" class="tab-pane cont active">
                            {{ form_start(form, { action: formAction }) }}
                                {{ form_rest(form) }}
                                <div class="spacer text-right">
                                    <button type="submit" class="btn btn-space btn-primary">Submit</button>
                                    <a href="{{ url('admin_course_list') }}" class="btn btn-space btn-default">Cancel</a>
                                </div>
                            {{ form_end(form) }}
                        </div>
                        {% if (course.id) %}
                        <div id="lessons" class="tab-pane cont">
                            {% include 'AdminCourseBundle:Lesson:list.html.twig' with {lessons: course.lessons} %}
                            <div id="lesson-new-wrapper" class="hidden"></div>
                            <a href="{{ url('admin_lesson_new', {courseId: course.id}) }}" class="btn btn-space btn-primary btn-md" data-action="action-new" data-target="#lesson-new-wrapper"><i class="icon icon-left s7-plus"></i> {{ 'admin.common.field.actions.new'|trans }}</a>
                        </div>
                        <div id="users" class="tab-pane">
                            <p>Consectetur adipisicing elit. Ipsam ut praesentium, voluptate quidem necessitatibus quam nam officia soluta aperiam, recusandae.</p>
                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos facilis laboriosam, vitae ipsum tenetur atque vel repellendus culpa reiciendis velit quas, unde soluta quidem voluptas ipsam, rerum fuga placeat rem error voluptate eligendi modi. Delectus, iure sit impedit? Facere provident expedita itaque, magni, quas assumenda numquam eum! Sequi deserunt, rerum.</p><a href="#">Read more</a>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
    <script src="{{ path('fos_js_routing_js', {"callback": "fos.Router.setData"}) }}"></script>
    <script type="text/javascript" src="{{ asset('lib/sortable/sortable.min.js') }}"></script>
    <script type="text/javascript">
        // Drag & Drop lessons to update positions
        var el = document.getElementById('lessons');
        var sortable = Sortable.create(el, {
            onEnd: function (evt) {
                var id = evt.item.dataset.id;
                var oldPosition = evt.oldIndex + 1;
                var newPosition = evt.newIndex + 1;

                $.post(
                        Routing.generate(
                                'admin_lesson_edit_position',
                                {
                                    id: id,
                                    oldPosition: oldPosition,
                                    newPosition: newPosition
                                }
                        )
                );
            }
        });
    </script>
    <script type="text/javascript">
        // Change between edit and view mode
        var toggleEditMode = function (event) {
            event.preventDefault();

            var panel = this.closest('.panel-lesson');
            var viewPanel = panel.querySelector('.lesson-view');
            var editPanel = panel.querySelector('.lesson-edit');

            viewPanel.classList.toggle('hidden');
            editPanel.classList.toggle('hidden');
        };

        var lessons = document.querySelectorAll('a[data-action="edit-lesson"]');
        Array.prototype.forEach.call(lessons, function (lesson) {
            lesson.addEventListener('click', toggleEditMode);
        });

        var cancels = document.querySelectorAll('a[data-action="edit-lesson-cancel"]');
        Array.prototype.forEach.call(cancels, function (lesson) {
            lesson.addEventListener('click', toggleEditMode);
        });
    </script>
    <script type="text/javascript">
        var registerCancelEvent = function registerCancelEvent (target) {
            var cancelNewLesson = target.querySelectorAll('a[data-action="new-lesson-cancel"]');
            Array.prototype.forEach.call(cancelNewLesson, function (lesson) {
                lesson.addEventListener('click', function (event) {
                    event.preventDefault();

                    var wrapper = this.closest('#lesson-new-wrapper');

                    wrapper.removeChild(wrapper.firstChild);
                    wrapper.classList.toggle('hidden');
                });
            });
        };

        // Create new lesson
        var add = document.querySelectorAll('a[data-action="action-new"]');
        Array.prototype.forEach.call(add, function (action) {
            action.addEventListener('click', function (event) {
                event.preventDefault();

                var url = this.href;
                var $target = $(this.dataset.target);

                $.get(url).done(function (response) {
                    $target.html(response);
                    $target.toggleClass('hidden');

                    registerCancelEvent($target[0]);
                });
            });
        });
    </script>
    {#<script type="text/javascript">
        var submitForm = function (event) {
            event.preventDefault();

            $.post(this.action, $(this).serialize());
        };

        var forms = document.querySelectorAll('form');
        Array.prototype.forEach.call(forms, function (lesson) {
            lesson.addEventListener('submit', submitForm);
        });
    </script>#}
{% endblock %}